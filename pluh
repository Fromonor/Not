local Original = 12447707844

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. Original then

local p = game.Players.LocalPlayer
local Humanoid = p.Character:WaitForChild("Humanoid")

for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
    animTrack:Stop()
end

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local debounce = false -- To prevent multiple detections

local Backpack = LocalPlayer:WaitForChild("Backpack") -- Wait for Backpack to load
local AddTools = true -- Initialize AddTools to true by default

-- Check if the tools "Ravage", "Swift Sweep", and "Collateral Ruin" already exist in the backpack
if Backpack:FindFirstChild("Stoic Bomb") and Backpack:FindFirstChild("20-20-20 Dropkick") and Backpack:FindFirstChild("Five Seasons") then
    AddTools = false
else
   AddTools = true
end

local function Tools()
        if AddTools then
        local tool1 = Instance.new("Tool")
        tool1.Name = "Stoic Bomb"
        tool1.RequiresHandle = false
        tool1.CanBeDropped = true
        tool1.Parent = Backpack
 
        local tool2 = Instance.new("Tool")
        tool2.Name = "20-20-20 Dropkick"
        tool2.RequiresHandle = false
        tool2.CanBeDropped = true
        tool2.Parent = Backpack
 
        local tool3 = Instance.new("Tool")
        tool3.Name = "Five Seasons"
        tool3.RequiresHandle = false
        tool3.CanBeDropped = true
        tool3.Parent = Backpack
end
end
-- Function to check movement state
local function checkMovementState()
    local moveDirection = LocalPlayer.Character.Humanoid.MoveDirection.Magnitude
    
    if moveDirection > 0 then
       task.spawn(function()
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humRp = character:WaitForChild("HumanoidRootPart")

-- Create and play sound effects
local function playSounds()
    local soundSFX = Instance.new("Sound")
    soundSFX.SoundId = "rbxassetid://18445228824"
    soundSFX.Volume = 2
    soundSFX.Name = "SFX"
    soundSFX.Parent = humRp
    soundSFX:Play()

    local soundSFX2 = Instance.new("Sound")
    soundSFX2.SoundId = "rbxassetid://18445228136"
    soundSFX2.Volume = 2
    soundSFX2.Name = "SFX2"
    soundSFX2.Parent = humRp
    soundSFX2:Play()

    local soundSFX1 = Instance.new("Sound")
    soundSFX1.SoundId = "rbxassetid://18445227792"
    soundSFX1.Volume = 2
    soundSFX1.Name = "SFX1"
    soundSFX1.Parent = humRp
    soundSFX1:Play()
end

local function createEffects()
    -- Create and configure the fine effect
    wait(1.7)
    local actuallyNice = game.ReplicatedStorage.Resources.KJEffects["fine...1"]:Clone()
    actuallyNice.CFrame = humRp.CFrame
    actuallyNice.CanCollide = false

    -- Create and configure the emit effects
    local boom = game.ReplicatedStorage.Resources.KJEffects["fine...Emit"]:Clone()
    boom.Parent = workspace
    boom.CanCollide = false
    boom.CFrame = humRp.CFrame * CFrame.new(0, -0.65, 0)

    local boom2 = game.ReplicatedStorage.Resources.KJEffects["fine...Emit2"]:Clone()
    boom2.Parent = workspace
    boom2.CanCollide = false
    boom2.CFrame = humRp.CFrame * CFrame.new(0, -0.65, 0)

    -- Emit particles from the first effect
    delay(0.16, function()
        for _, Particles in pairs(boom:GetDescendants()) do
            if Particles:IsA("ParticleEmitter") then
                actuallyNice.Parent = workspace
                Particles:Emit(Particles:GetAttribute("EmitCount"))
            end
        end
    end)

    -- Cleanup after 8.17 seconds
    delay(8.17, function()
        for _, Particles in pairs(boom2:GetDescendants()) do
            if Particles:IsA("ParticleEmitter") then
                Particles:Emit(Particles:GetAttribute("EmitCount"))
            end
        end

        boom2:Destroy()
    end)
end

local function executeVFX()
    -- Play sound effects and create visual effects
    playSounds()
    createEffects()
end

-- Execute the VFX when the script runs
executeVFX()
end)
task.spawn(function()
local player = game.Players.LocalPlayer
repeat wait() until player.Character.Humanoid
local humanoid = player.Character.Humanoid
local character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
local UserInputService = game:GetService("UserInputService")
debounce = false -- Activate debounce
local anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://18445236460"
local playAnim = humanoid:LoadAnimation(anim)
anim.AnimationId = "rbxassetid://0"

spawn(function()
    wait(1)
    debounce = true
end)

playAnim:Play()
playAnim:AdjustSpeed(1)
wait(0.3)
playAnim:AdjustSpeed(1)

local Players = game:GetService("Players")
local Character = Players.LocalPlayer.Character or Players.LocalPlayer.CharacterAdded:Wait()

local animationPlayed = false -- Flag to track if the animation has already been played
end)
task.spawn(function()
wait(0.2)
local player = game.Players.LocalPlayer
local s = tick()
while tick() - s < 1.47 do
local h = game.Players.LocalPlayer.Character.HumanoidRootPart
h.CFrame = h.CFrame * CFrame.new(0, 0, -0.3)
wait()
end
end)
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local animationId = 7815618175 -- Replace with your specific animation ID
local isBlocked = true -- Start with blocking the animation

local function onAnimationPlayed(animationTrack)
    if isBlocked and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop the specific animation
        animationTrack:Stop()
    end
end

local function blockAnimation()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")

    -- Connect to the animation played event
    humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    -- You can also stop all currently playing animations if needed
    for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
        if animTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
            animTrack:Stop()
        end
    end

game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
wait(3)
game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
    -- Wait for 4 seconds before unblocking
    wait()
    isBlocked = false -- Unblock the animation
end

-- Start blocking the animation
blockAnimation()
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local soundsToBlock = {
    ["rbxassetid://12332099688"] = true,
    ["rbxassetid://12333042986"] = true,
    ["rbxassetid://14762034452"] = true,
}

local function onSoundPlayed(sound)
    if soundsToBlock[sound.SoundId] then
        sound.Volume = 0 -- Set volume to 0 instead of stopping
    end
end

local function blockSounds()
    -- Connect to the Sound.Played event in the workspace
    workspace.DescendantAdded:Connect(function(descendant)
        if descendant:IsA("Sound") then
            descendant.Played:Connect(function() onSoundPlayed(descendant) end)
        end
    end)
    
    -- Check for existing sounds when the script runs
    for _, sound in ipairs(workspace:GetDescendants()) do
        if sound:IsA("Sound") then
            sound.Played:Connect(function() onSoundPlayed(sound) end)
        end
    end
end

-- Start blocking sounds
blockSounds()

-- Restore volume when the player dies
humanoid.Died:Connect(function()
    for _, sound in ipairs(workspace:GetDescendants()) do
        if sound:IsA("Sound") and soundsToBlock[sound.SoundId] then
            sound.Volume = 1 -- Restore volume
        end
    end
end)
wait()
Tools()
    elseif moveDirection == 0 then
        task.spawn(function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humRp = character:WaitForChild("HumanoidRootPart")

    -- Create and play sound effects
    local function playSounds()
        local soundSFX = Instance.new("Sound")
        soundSFX.SoundId = "rbxassetid://17150550302"
        soundSFX.Volume = 2
        soundSFX.Name = "SFX"
        soundSFX.Parent = humRp
        soundSFX:Play()

        local soundSFX2 = Instance.new("Sound")
        soundSFX2.SoundId = "rbxassetid://17150550559"
        soundSFX2.Volume = 2
        soundSFX2.Name = "SFX2"
        soundSFX2.Parent = humRp
        soundSFX2:Play()
    end

    local function createEffects()
        -- Create and configure the fine effect
        local actuallyNice = game.ReplicatedStorage.Resources.KJEffects["fine...1"]:Clone()
        actuallyNice.Position = humRp.Position
        actuallyNice.CanCollide = false

        -- Create a weld for the fine effect
        local weld = Instance.new("Weld")
        weld.Part0 = actuallyNice
        weld.Part1 = humRp
        weld.C1 = CFrame.new(0, 0, 0)
        weld.Parent = actuallyNice

        actuallyNice.Parent = workspace

        -- Create and configure the emit effects
        local boom = game.ReplicatedStorage.Resources.KJEffects["fine...Emit"]:Clone()
        boom.CanCollide = false
        boom.Position = humRp.Position + Vector3.new(0, -0.65, 0)
        boom.Parent = workspace

        local boom2 = game.ReplicatedStorage.Resources.KJEffects["fine...Emit2"]:Clone()
        boom2.CanCollide = false
        boom2.Position = humRp.Position + Vector3.new(0, -0.65, 0)
        boom2.Parent = workspace

        -- Emit particles from the first effect
        delay(0.16, function()
            for _, Particles in pairs(boom:GetDescendants()) do
                if Particles:IsA("ParticleEmitter") then
                    Particles:Emit(Particles:GetAttribute("EmitCount"))
                end
            end
        end)

        -- Cleanup after 8.17 seconds
        delay(8.17, function()
            for _, Particles in pairs(boom2:GetDescendants()) do
                if Particles:IsA("ParticleEmitter") then
                    Particles:Emit(Particles:GetAttribute("EmitCount"))
                end
            end

            wait()
            actuallyNice:Destroy()
        end)
    end

    local function executeVFX()
        -- Play sound effects and create visual effects
        playSounds()
        createEffects()
    end

    -- Execute the VFX when the script runs
    executeVFX()
end)
local player = game.Players.LocalPlayer
repeat wait() until player.Character.Humanoid
local humanoid = player.Character.Humanoid
local character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
local UserInputService = game:GetService("UserInputService")
debounce = false -- Activate debounce
local anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://17140902079"
local playAnim = humanoid:LoadAnimation(anim)
anim.AnimationId = "rbxassetid://0"

spawn(function()
    wait(1)
    debounce = true
end)

playAnim:Play()
playAnim:AdjustSpeed(1)
wait(0.3)
playAnim:AdjustSpeed(1)

local Players = game:GetService("Players")
local Character = Players.LocalPlayer.Character or Players.LocalPlayer.CharacterAdded:Wait()

local animationPlayed = false
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local animationId = 7815618175 -- Replace with your specific animation ID
local isBlocked = true -- Start with blocking the animation

local function onAnimationPlayed(animationTrack)
    if isBlocked and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop the specific animation
        animationTrack:Stop()
    end
end

local function blockAnimation()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")

    -- Connect to the animation played event
    humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    -- You can also stop all currently playing animations if needed
    for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
        if animTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
            animTrack:Stop()
        end
    end

game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
wait(9.55)
game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
    -- Wait for 4 seconds before unblocking
    wait()
    isBlocked = false -- Unblock the animation
end

-- Start blocking the animation
blockAnimation()
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local soundsToBlock = {
    ["rbxassetid://12332099688"] = true,
    ["rbxassetid://12333042986"] = true,
    ["rbxassetid://14762034452"] = true,
}

local function onSoundPlayed(sound)
    if soundsToBlock[sound.SoundId] then
        sound.Volume = 0 -- Set volume to 0 instead of stopping
    end
end

local function blockSounds()
    -- Connect to the Sound.Played event in the workspace
    workspace.DescendantAdded:Connect(function(descendant)
        if descendant:IsA("Sound") then
            descendant.Played:Connect(function() onSoundPlayed(descendant) end)
        end
    end)
    
    -- Check for existing sounds when the script runs
    for _, sound in ipairs(workspace:GetDescendants()) do
        if sound:IsA("Sound") then
            sound.Played:Connect(function() onSoundPlayed(sound) end)
        end
    end
end

-- Start blocking sounds
blockSounds()

-- Restore volume when the player dies
humanoid.Died:Connect(function()
    for _, sound in ipairs(workspace:GetDescendants()) do
        if sound:IsA("Sound") and soundsToBlock[sound.SoundId] then
            sound.Volume = 1 -- Restore volume
        end
    end
end)
wait()
Tools()
    end
end
        checkMovementState()
        debounce = true
        wait(8) 
        debounce = false
        if game.Players.LocalPlayer.Character.Humanoid.Health == 0 then
        debounce = true
    end
    end

end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)
