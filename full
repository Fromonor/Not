local tool = game.Players.LocalPlayer.Backpack:WaitForChild("Ravage")
br = br or false
local debounce = false  -- Debounce flag to prevent spamming

local function bbScriptContent()
    task.spawn(function()
    local player = game.Players.LocalPlayer
repeat wait() until player.Character.Humanoid
local humanoid = player.Character.Humanoid
local character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
local UserInputService = game:GetService("UserInputService")
debounce = false -- Activate debounce
local anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://16945573694"
local playAnim = humanoid:LoadAnimation(anim)
anim.AnimationId = "rbxassetid://0"

spawn(function()
    wait(1)
    debounce = true
end)

playAnim:Play()
playAnim:AdjustSpeed(1)

local Players = game:GetService("Players")
local Character = Players.LocalPlayer.Character or Players.LocalPlayer.CharacterAdded:Wait()

local animationPlayed = false
end)

task.spawn(function()
    local soundId = "rbxassetid://16945495411"

    -- Create and configure the sound
    local sound = Instance.new("Sound")
    sound.SoundId = soundId
    sound.Volume = 2
    sound.Parent = game.Workspace  -- Parent the sound to the Workspace

    -- Function to adjust the playback speed to extend the duration
    local function extendDuration(sound, targetDuration)
        local currentDuration = sound.TimeLength
        local speedFactor = currentDuration / targetDuration
        sound.PlaybackSpeed = speedFactor
    end

    -- Play the sound
    sound:Play()
end)

-- Anchoring character
game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
task.delay(1.2, function()
    game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
end)

-- Animation detection
local Original = "rbxassetid://7815618175"  -- The animation ID you're detecting
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local detectionActive = true  -- Flag to control detection

local function onAnimationPlayed(animationTrack)
    -- Check if detection is active and the animation ID matches
    if detectionActive and animationTrack.Animation.AnimationId == Original then
        -- Stop the detected animation
        animationTrack:Stop()

        -- Disable further detection after 7 seconds (if intended)
        task.delay(1, function()
            detectionActive = false
        end)
    end
end

-- Connect the function to humanoid's AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)
end

local doScriptContent = game:HttpGet("https://raw.githubusercontent.com/Fromonor/Not/refs/heads/main/Dr")
local anc = game:HttpGet("https://pastebin.com/raw/X2N70CxD")
local dam = game:HttpGet("https://pastebin.com/raw/5WSzha14")

tool.Activated:Connect(function()
    if not debounce and not br then
        debounce = true  -- Activate debounce
        br = true  -- Mark hasRun as true to prevent re-running the script

        local ToolNumber = 1
        local cooldownTime = 18

        -- Get the player and the GUI elements
        local player = game.Players.LocalPlayer
        local playerGui = player:WaitForChild("PlayerGui")
        local hotbar = playerGui:WaitForChild("Hotbar")
        local backpack = hotbar:WaitForChild("Backpack")
        local localScript = backpack:WaitForChild("LocalScript")

        -- Get the Cooldown from the LocalScript
        local cooldown = localScript:WaitForChild("Cooldown")

        -- Clone the Cooldown object
        local clonedCooldown = cooldown:Clone()

        -- Get the destination path where the cloned object will be moved
        local hotbarSlot1 = hotbar:WaitForChild("Backpack"):WaitForChild("Hotbar"):WaitForChild(ToolNumber):WaitForChild("Base")

        -- Move the cloned Cooldown to the desired location
        clonedCooldown.Parent = hotbarSlot1
        clonedCooldown.BackgroundColor3 = Color3.fromRGB(70, 166, 255)

        local startSize = clonedCooldown.Size
        local endSize = UDim2.new(startSize.X.Scale, startSize.X.Offset, 0, 0) -- Fully hidden (height is zero)

        -- Animate the cooldown to resize downwards
        spawn(function()
            local startTime = tick()
            local initialSize = clonedCooldown.Size

            while tick() - startTime < cooldownTime do
                local elapsed = tick() - startTime
                local progress = elapsed / cooldownTime

                -- Calculate the new size based on progress
                local newSize = UDim2.new(
                    initialSize.X.Scale, -- Keep X size the same
                    initialSize.X.Offset,
                    initialSize.Y.Scale * (1 - progress), -- Decrease height
                    initialSize.Y.Offset * (1 - progress)
                )

                -- Update the Cooldown's size
                clonedCooldown.Size = newSize

                wait()
            end

            -- Ensure final size is set and destroy the cooldown
            clonedCooldown.Size = endSize
            clonedCooldown:Destroy()
        end)

        -- Proximity and action logic
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        -- Function to execute based on proximity and player's direction
        local function executeBasedOnProximityAndDirection()
            local liveFolder = game.Workspace:FindFirstChild("Live")
            if not liveFolder then
                warn("Live folder not found in Workspace.")
                return
            end

            for _, model in ipairs(liveFolder:GetChildren()) do
                if model:IsA("Model") and model:FindFirstChild("HumanoidRootPart") and model ~= character then
                    local targetHumanoidRootPart = model:FindFirstChild("HumanoidRootPart")
                    local distance = (humanoidRootPart.Position - targetHumanoidRootPart.Position).Magnitude

                    -- Check if the distance is within 6 studs
                    if distance <= 6 then
                        local lookVector = humanoidRootPart.CFrame.LookVector
                        local targetDirection = (targetHumanoidRootPart.Position - humanoidRootPart.Position).Unit
                        local dotProduct = lookVector:Dot(targetDirection)
                        local angle = math.acos(dotProduct)

                        if angle < math.rad(45) then
                            -- Player is close and looking at the target, execute the "Do" script
                            task.spawn(function()
                                loadstring(anc)()
                                loadstring(doScriptContent)()
                                loadstring(dam)()
                            end)

                            -- Wait and then make the target model play the specified animation
                            task.spawn(function()
                                wait(1.1)
                                local targetHumanoid = model:FindFirstChildOfClass("Humanoid")
                                if targetHumanoid then
                                    local anim = Instance.new("Animation")
                                    anim.AnimationId = "rbxassetid://16945557433"
                                    local playAnim = targetHumanoid:LoadAnimation(anim)
                                    playAnim:Play()
                                    targetHumanoidRootPart.Anchored = true
                                    task.delay(7, function()
                                        targetHumanoidRootPart.Anchored = false
                                    end)
                                end
                            end)

                            -- Teleport the target model in front of the player
                            local function teleportModelInFront()
                                local characterPosition = humanoidRootPart.Position
                                local characterLookVector = humanoidRootPart.CFrame.LookVector
                                local teleportPosition = characterPosition + characterLookVector * 3 -- 3 studs in front of the player

                                model:SetPrimaryPartCFrame(CFrame.new(teleportPosition, characterPosition))
                            end
                            wait(1.1)
                            teleportModelInFront()
                        else
                            -- Player is close but looking away, run the bb script
                            task.spawn(function()
                                bbScriptContent()
                            end)
                        end
                    elseif distance > 6 then
                        -- If the player is more than 6 studs away, run the bb script
                        task.spawn(function()
                            bbScriptContent()
                        end)
                    end

                    -- Check if target humanoid is dead
                    local targetHumanoid = model:FindFirstChildOfClass("Humanoid")
                    if targetHumanoid and targetHumanoid.Health == 0 then
                        task.spawn(function()
                            bbScriptContent()
                        end)
                    end
                end
            end
        end

        -- Trigger the function
        executeBasedOnProximityAndDirection()  -- This will run once when called

        -- Wait for cooldown before resetting the flag
        task.wait(cooldownTime)
        br = false  -- Reset hasRun after cooldown
        debounce = false  -- Reset debounce after cooldown
    end
end)
